import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import remark from 'remark';
import html from 'remark-html';

// Absolute root folder directory path,
// because this file is being executed at the root somehow !!!
const absDirPath = path.join(process.cwd(), 'posts');

export function getSortedPostsData() {
    // Array of file names within the /posts folder at the root
    const fileNames = fs.readdirSync(absDirPath);

    const unsortedPostsData = fileNames.map((filename) => {
        // id's generated by removing .md at the end of strings
        const id = filename.replace(/\.md$/, '');
        // we want to store file content in a variable
        const fileContent = fs.readFileSync(
            path.join(absDirPath, filename),
            'utf8'
        );
        // let's extract only the meta data
        const fileMatter = matter(fileContent);

        return {
            id,
            ...fileMatter.data
        };
    });

    return unsortedPostsData.sort(sortDates);
}

// basic sort function for dates
function sortDates(a, b) {
    if (new Date(a.date).getTime() > new Date(b.date).getTime()) {
        return 1;
    } else if (new Date(a.date).getTime() < new Date(b.date).getTime()) {
        return -1;
    } else {
        return 0;
    }
}

export function getPostIds() {
    // we want to get this kind of array:
    // [
    //     {
    //         params: {
    //             id: 'ssg-ssr'
    //         }
    //     },
    //     ...
    // ]

    const fileNames = fs.readdirSync(absDirPath);

    return fileNames.map((filename) => {
        const id = filename.replace(/\.md$/, '');

        return {
            params: { id }
        };
    });
}

export async function getPostData(id) {
    const fullPath = path.join(absDirPath, `${id}.md`);
    const postContent = fs.readFileSync(fullPath, 'utf8');

    // we use gray-matter to parse post meta data
    const matterResult = matter(postContent);

    // we want to convert markdown to html string'
    const processedContent = await remark()
        .use(html)
        .process(matterResult.content);

    const contentHtml = processedContent.toString();

    return {
        id,
        contentHtml,
        ...matterResult.data
    };
}
